function [ a_next ] = uct (s_start, player)


    num_simulaciones = 100;
    max_steps = 4;
    
    d = 1;
    dl = zeros(max_steps+1,1);
    rewards = zeros(1,2);
    dl(1) = 1;
    w1 = 1;
    w2 = 2;
    states(1,:,:) = s_start(:,:);
    players(1) = player;
    v = findValidMoves(s_start,player);
    actions(1, 1:length(v)) = v;
    
    while (d<=max_steps)
        c(:,:) = states(w1,:,:);
        for e = 1:nnz(actions(w1,:))
            [ s_next, r, eoe, validMoves, nplayer ]= doAction(c, actions(w1,e), players(w1));
            states(w2,:,:) = s_next(:,:);
            rewards(w2,:) = r(:);
            eoes(w2) = eoe;
            actions(w2, 1:length(validMoves)) = validMoves;
            players(w2) = nplayer;
            parent(w2) = w1;
            childs(w1,e) = w2;
            w2 = w2 + 1;
            dl(d+1) = dl(d+1) + 1;
        end
        if (w1 == sum(dl(1:d)))
            d = d + 1;
        end
        w1 = w1 + 1;
    end
        
    Q = zeros(size(states,1),size(actions,2));
    nsa = zeros(size(states,1),size(actions,2));
    
    for sims = 1: num_simulaciones
        steps = 1;
        s_ind = 1;
        tray = [];
        eoe = false;
        while (~eoe && steps<max_steps)
            a_ind = chooseAction(actions, players, player, s_ind, Q, nsa);
            s_next_ind = childs(s_ind, a_ind);
            r = rewards(childs(s_ind, a_ind),player);
            eoe = eoes(childs(s_ind, a_ind));
            tray = [tray [s_ind  a_ind r]'];
            s_ind = s_next_ind;
            steps = steps + 1;
        end
        if (~eoe)
            s_next(:,:) = states(s_ind,:,:);
            nplayer = players(s_ind);
            val = actions(s_ind);
            while (~eoe)
                a = heuristic12 (val);
                [ s_next, reward, eoe, val, nplayer ]= doAction(s_next, a, nplayer);
            end
            tray(3,end) = reward(player);
        end
        if(eoe)
            for i=1:size(tray,2)
                s_ind = tray(1,i);
                a_ind = tray(2,i);
                R = tray(3,end);
                
                nsa(s_ind, a_ind) = nsa(s_ind, a_ind)+1;
                Q(s_ind, a_ind) = Q(s_ind, a_ind) + 1/nsa(s_ind,a_ind) * (R - Q(s_ind, a_ind));
            end
        end
    end
    
    [~, a_ind] = max(Q(1,1:nnz(Q(1,:))));
    a_next = actions(1,a_ind);
end
            
            
